/*
Kin:Pathic Range Finder Project CAPSTONE Project SU23
By Andre Reyes, Rayaan Malhotra & Ronald Quijada

  This program is a two part program RX.io (adult device) & TX.io (child device).
  They are both loaded on to seperate boards:
    RX.io contains all the extra functions and components
    TX.io only contains the voltage divider to update RX with it's voltage

  The RX.io is the receiver which waits for TX.io to send it's battery voltage.
  Due to the nature of the RF95, upon receipt, it also detects it's rssi value without
  the Transmitter needing to send any additional info. 

  TX.io constantly sends the battery voltage level and in doing so also updates the RX.io 
  on their current distance apart from one another.


*/


#include <SPI.h>
#include <RH_RF95.h>

#define RF95_FREQ 915.0
#define RFM95_CS   16
#define RFM95_INT  21
#define RFM95_RST  17


#define BATTERY_PIN A0
#define MOTOR_PIN 12
#define RED_PIN 13
#define BLUE_PIN 11
#define GREEN_PIN 10
#define LED_BUTTON A2
#define CHILD_RED_PIN 9
#define CHILD_BLUE_PIN 6
#define CHILD_GREEN_PIN 5

/**   ONLY ENABLE IF DEBUGGING IN SERIAL MONITOR         **/
/**   Sets debug mode to enable serial monitor outputs   **/
/**   enable: true or 1, disable: false or 0             **/
#define DEBUG_MODE true 




/*********** BEGIN PROGRAM ***********/

volatile bool buttonState = LOW; // track button press 
int16_t packetnum = 0;  // packet counter, we increment per xmission
float childVoltage = 0; // received voltage from child device
float voltage = 0;  // adult device voltage
RH_RF95 rf95(RFM95_CS, RFM95_INT); // creates instance of the radio driver

void setup(){
  pinInit();
  radioInit();

  if(DEBUG_MODE){  
    Serial.begin(115200);
    Serial.println("Feather Radio initiated!");
  }
}

void loop(){
  if(buttonState == HIGH){ //can possibly change this to a while loop to test if button is high in order to mimic "display led while holding"
    
    voltage = calculateVoltage(); 
    checkLedStatus(voltage, childVoltage);
    delay(2000);
    turnOffLeds();
    buttonState = LOW;

    if(DEBUG_MODE){
      Serial.print("ADULT Battery Voltage: "); 
      delay(10);
      Serial.println(voltage);

      Serial.print("CHILD Battery Voltage: ");
      delay(10);
      Serial.println(childVoltage);
    }
  }

  if(rf95.available()){

    // available() detects if a packet is sniffed, recv(buffer, messageLength) recieves and stores actual message in buffer
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);

    if(rf95.recv(buf,&len)){

      // gather child data
      childVoltage = *((float*)buf);
      int16_t rssi = rf95.lastRssi();

      if(DEBUG_MODE){
        Serial.print("RSSI: "); Serial.print(rssi, DEC);
      }

      if(rssi < -40){
        digitalWrite(MOTOR_PIN, HIGH);

        if(DEBUG_MODE){
          Serial.println(": OUT OF RANGE!!!!!!!");
        }
      }
      else{
        digitalWrite(MOTOR_PIN, LOW);

        if(DEBUG_MODE){
          Serial.println(": IN RANGE!!!!!!!");
        }
      }
    }
  }
}

void myISR(){
  // Interrupt Service Routine, this is a short function to allow the button falg to be raised. 

  buttonState = HIGH;
}
void checkLedStatus(float adultVoltage, float childVoltage){
  // takes in the voltages and then checks against conditions to determine LED color

  // Adult LED handling
  if(adultVoltage > 3.7) {
    digitalWrite(RED_PIN, HIGH); 
    digitalWrite(GREEN_PIN, LOW);  
    digitalWrite(BLUE_PIN , HIGH); 
  } 
  else if(adultVoltage > 1 && adultVoltage < 3.7) {
    digitalWrite(RED_PIN, LOW); 
    digitalWrite(GREEN_PIN, LOW); 
    digitalWrite(BLUE_PIN , HIGH); 
  } 
  else {
    digitalWrite(RED_PIN, LOW); 
    digitalWrite(GREEN_PIN, HIGH);  
    digitalWrite(BLUE_PIN, HIGH); 
  }

  // Child LED handling
  if(childVoltage > 3.7) {
    digitalWrite(CHILD_RED_PIN, HIGH); 
    digitalWrite(CHILD_GREEN_PIN, LOW);  
    digitalWrite(CHILD_BLUE_PIN , HIGH); 
  } 
  else if(childVoltage > 1 && childVoltage < 3.7) {
    digitalWrite(CHILD_RED_PIN, LOW); 
    digitalWrite(CHILD_GREEN_PIN, LOW); 
    digitalWrite(CHILD_BLUE_PIN , HIGH); 
  } 
  else {
    digitalWrite(CHILD_RED_PIN, LOW); 
    digitalWrite(CHILD_GREEN_PIN, HIGH);  
    digitalWrite(CHILD_BLUE_PIN, HIGH); 
  }
}


void turnOffLeds(){
  // sets all pins high to turn off common Anode RGB Led

  digitalWrite(RED_PIN, HIGH); 
  digitalWrite(BLUE_PIN , HIGH); 
  digitalWrite(GREEN_PIN, HIGH); 
  digitalWrite(CHILD_RED_PIN, HIGH); 
  digitalWrite(CHILD_BLUE_PIN , HIGH); 
  digitalWrite(CHILD_GREEN_PIN, HIGH); 
}

float calculateVoltage(){
  // calculates the battery voltage based on the analog pin (values 0-1024), Assuming you have a 1:2 voltage divider
  // two 100k resistors were used to divide voltage.
  
  float voltage = analogRead(BATTERY_PIN);
  voltage = voltage * (3.3 / 1024) * 2; // Assuming you have a 1:2 voltage divider
  return voltage;
}

void pinInit(){
  //initiate pins and pin modes for all components

  // inputs
  pinMode(BATTERY_PIN, INPUT);
  pinMode(LED_BUTTON, INPUT);
  attachInterrupt(digitalPinToInterrupt(LED_BUTTON), myISR, HIGH); // trigger when button pressed

  //battery RGB LEDs, common anode
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(RED_PIN, OUTPUT);
  pinMode(BLUE_PIN , OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(CHILD_RED_PIN, OUTPUT);
  pinMode(CHILD_BLUE_PIN , OUTPUT);
  pinMode(CHILD_GREEN_PIN, OUTPUT);

  //setup led to default off since common anode LED are opposite HIGH == OFF/zero
  digitalWrite(RED_PIN, HIGH);
  digitalWrite(BLUE_PIN , HIGH);
  digitalWrite(GREEN_PIN, HIGH);
  digitalWrite(CHILD_RED_PIN, HIGH);
  digitalWrite(CHILD_BLUE_PIN , HIGH);
  digitalWrite(CHILD_GREEN_PIN, HIGH);

  //RF95 setup
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
}

void radioInit(){
  // initialize radio code, boilerplate code taken from adafruit rp2040 example code.
  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);
  
  // initiate radio
  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    while (1);
  }
  Serial.println("LoRa radio init OK!");

  // set frequency to 915Mhz
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);

  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter
  // pin, then you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);

 }
